---
title: "Classification Ascendante Hiérarchique"
subtitle: "Construire une CAH avec des fonctions R-base"
author: 
- Hugues pecout
- Justin Dansou
date: last-modified
ordre: 02
code-fold: true
code-tools: true
format:
  html:
    theme: cosmo
    code-copy: true
    embed-resources: TRUE
---

## Introduction

La Classification Ascendante Hiérarchique (CAH) est l'une des techniques statistiques les plus utilisées pour segmenter une population en différentes classes ou sous-groupes. Son objectif est de regrouper les individus similaires tout en maintenant une grande dissimilarité entre ces classes.

**Le principe de la CAH se déroule en trois étapes :**

1.  **Calcul d'une matrice de distances** qui mesure la distance entre chaque paire d'individus. Lorsque deux observations sont identiques, leur distance est nulle. Plus les observations sont différentes, plus la distance est grande.

2.  **Regroupement hiérarchique** des individus par itération. Cette classification est ascendante car elle part des observations individuelles. Elle est hiérarchique car elle engendre des classes ou groupes de plus en plus larges (incluant des sous-groupes en leur sein) en fonction des distances calculée entre les individus.

3.  **Découpage du dendrogramme** (ou arbre de classification) à une certaine hauteur pour obtenir la partition souhaitée.

\

### Préparation des données

Pour ce cours nous utiliserons les données ***DEV_AFRICA_2018***.

```{r}
#| code-fold: FALSE
 
data <- read.csv2(file = "data/DEV_AFRICA_2018/afrika_don.csv")


```

Pour réaliser une CAH, il est nécessaire de préparer le tableau de données. Commencez par séléctionner uniquement les variables qui vous souhaitez utiliser.

```{r}
#| code-fold: FALSE
 
# Liste des variable à supprimer
var_to_del <- c("iso3", "name", "nom", "SUBREG")

# Supression des variables
data_clean <- data[,!names(data) %in% var_to_del]

```

Afin de pouvoir manipuler correctement des données qualitatives, convertissez-les en facteur.

```{r}
#| code-fold: FALSE
 
liste_var_quali <-  c("LOCKED", "COLFRA", "COLGBR", "LANGFR", "LANGEN")

# Transformation des variables qualitatives en `factor`
data_clean[,liste_var_quali] <- data.frame(lapply(data_clean[,liste_var_quali], factor))

```

Il est indispensable de bien nommer les lignes du tableau afin d'identifier facilement les individus.

```{r}
#| code-fold: FALSE

# Utilisation du code ISO des pays en nom de lignes
row.names(data_clean) <- data[,"iso3"] 


```

**Tableau de données préparé pour la CAH :**

```{r echo = FALSE, include = TRUE, eval = TRUE, warning= FALSE}
#| code-fold: FALSE

library(knitr)
library(kableExtra)

data_clean %>% 
  kable %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "400px") 


```

\

## 1. Matrice de distance

La ressemblance des individus est évaluée par la distance mathématique entre chaque observation. Plusieurs distances peuvent être calculées en fonction du type de données utilisées. Voici quelques exemples :

**Calcul d'une matrice de distance pour des variables quantitatives.**

La fonction `dist()` permet dans calculer plusieurs distances mathématiques (euclidiennes, Maximum, Manhattan, Canberra...) pour les variables quantitatives

```{r, eval=TRUE}
#| code-fold: FALSE

# Sélection des variables quantitatives
var_quanti <- data_clean[,c(1:17)] 

# Calcul de la matrice de distances (euclidienne)
md_eucli <- dist(var_quanti, method = "euclidean")
```

**Calcul d'une matrice de distance pour des variables qualitatives.**

Pour des variables qualitatives, une matrice de distances du χ² peut-être obtenue par l'intermédiaire d'une Analyse à Correspondance Multiple (ACM) avec la fonction `dudi.acm()`, puis de la la fonction `dist.dudi()` du package `ade4`.

La distance utilisée dans les analyses de correspondance multiples (ACM) est une variante de la distance du χ².

```{r, eval=TRUE}
#| code-fold: FALSE


# Sélection des variables qualitatives
var_quali <- data_clean[,c(18:22)] 

library (ade4)
# Calcul ACM
acm <- dudi.acm(var_quali, scannf = FALSE, nf = 5)

# Calcul matrice distance du χ²
md_chi2 <- dist.dudi(acm)

```

**Calcul d'une matrice de distance pour des variables qualitatives et quantitatives.**

La distance de Gower peut être utilisée pour un ensemble de variables qualitatives et quantitatives. Pour cela, vous pouvez utilisez la fionction `daisy()` du package `cluster`.

```{r, eval=TRUE}
#| code-fold: FALSE

library(cluster)
md_gower <- daisy(data_clean, metric = "gower")

```

\

## 2. Regroupement Hiérarchique

Il faut ensuite choisir une méthode d'agrégation pour construire le dendrogramme. De nombreuses solutions existent (*single linkage*, *average linkage*, *ward linkage*...). Les différentes méthodes de regroupement hiérarchique utilisent des critères différents pour évaluer la distance entre les groupes et peuvent donner des résultats (dendogramme) légèrement différents en termes de structure des clusters formés.

Par exemple, la méthode *complete linkage* (liaison complète) est une des techniques couramment utilisées pour réaliser le regroupement hiérarchique lors de la CAH. Cette méthode consiste à calculer la distance entre deux groupes de données en se basant sur les distances maximales entre tous les points des deux groupes. Concrètement, lors du regroupement hiérarchique, la distance entre deux groupes est déterminée en trouvant la distance maximale entre les points de chaque groupe. Ainsi, la distance entre deux groupes est définie par la paire d'observations qui sont les plus éloignées l'une de l'autre parmi toutes les paires possibles d'observations entre les deux groupes. Cette approche est souvent utilisée lorsque l'on souhaite privilégier la formation de clusters compacts et bien séparés les uns des autres, car la distance choisie est la plus grande possible entre les groupes. Elle peut être utile lorsque l'on s'intéresse à des sous-groupes distincts et bien définis dans les données.

La fonction R-base pour le calcul d'un dendrogramme à partir d'une matrice de distances est `hclust()`. La méthode d'aggrégation souhaitée peut être précisé avec l'argument `method`. Quelques exemple d'application :

::: panel-tabset
## Variables quantitatives

Aggrégation des individus par la méthode de *Ward* appliquée au carré des distances ("ward.D2")

```{r}
#| code-fold: FALSE
hc_eucli_ward2 <- hclust(md_eucli, method = "ward.D2")
```

Visualisation du dendogramme (arbre de classification) avec la fonction `plot()`.

```{r}
#| code-fold: FALSE
plot(hc_eucli_ward2, main = "Distance euclidienne + Méthode de Ward2")

```

## Variables qualitatives

Aggrégation des individus par la méthode de liason complète ("complete")

```{r}
#| code-fold: FALSE
hc_chi2_complete <- hclust(md_chi2, method = "complete")
```

Visualisation du dendogramme (arbre de classification) avec la fonction `plot()`.

```{r}
#| code-fold: FALSE
plot(hc_chi2_complete, main = "Distance chi2 + Méthode de liasion complète")
```

## Toutes les variables (quantitatives et qualitatives)

Aggrégation des individus par la méthode de liason moyenne ("average")

```{r}
#| code-fold: FALSE
hc_gower_average <- hclust(md_gower, method = "average")
```

Visualisation du dendogramme (arbre de classification) avec la fonction `plot()`.

```{r}
#| code-fold: FALSE
plot(hc_gower_average, main = "Distance de Gower + Méthode de liaison moyenne")
```
:::

::: callout-important
En fonction de vos données et de vos objectifs, vous pouvez réaliser plusieurs dendrogramme différents jusqu'à obtenir une classification qui fait « sens ».
:::

\

## 3. Partitionnement

Il ne reste plus qu'à découper le dendrogramme obtenu à une certaine hauteur pour obtenir une partition des individus. La qualité d'une partition se traduit mathématiquement par une petite variabilité intra-classe et une grande variabilité inter-classes. La forme et les sauts d'inertie du dendogramme permettent d'apprécier l'évolution de ces variabilités en fonction du nombre de partitions. Par exemple :

::: panel-tabset
## Forme de l'arbre

L'analyse de la forme du dendogramme fournit des indications sur le nombre de classes à retenir. Deux branches bien distinctes apparaissent sur l'arbre. Ces deux branches se subdivisent ensuite en 4 sous-groupes. Les partitions suivantes semblent beaucoup moins marquées.

```{r}
#| code-fold: FALSE
#| echo: FALSE
plot(hc_eucli_ward2, main = "Distance euclidienne + Méthode de Ward2")
```

## Sauts d'inertie

L'inertie de l'arbre renvoyée par la fonction `hclust()` est l'**inertie inter-classe** qui traduit la séparation et la compacité des classes. Elle est calculée à partir des distances entre les centres des classes formés à chaque étape du regroupement. Une inertie inter-classe élevée indique que les clusters sont bien séparés, ce qui est généralement considéré comme souhaitable lors de la formation de groupes homogènes. En visualisant l'évolution de l'inertie selon le nombre de classes, on peut ainsi évaluer la qualité de la partition et choisir le nombre optimal de classes pour créer des groupes homogènes et bien distincts.

L'inertie du dendogramme est stockée dans l'élément `height` d'un objet `hclust`. Il est facile de représenter les sauts d'inertie avec la fonction `plot()`.

```{r}
#| code-fold: FALSE

# Récupération et tri croissant de l'inertie de chaque partition
inertie <- sort(hc_eucli_ward2$height, decreasing = TRUE)

# Représentation graphique de l'inertie en fonction du nombre de classe
plot(inertie[1:13], type = "s", xlab = "Nombre de classes", ylab = "Inertie")

```
:::

La fonction `rect.hclust()` permet de visualiser les différentes partitions directement sur le dendrogramme.

```{r}
#| code-fold: FALSE

plot(hc_eucli_ward2, main = "Distance euclidienne + Méthode de Ward2")
rect.hclust(hc_eucli_ward2, 2, border = "green4") # Partition en 2 classes
rect.hclust(hc_eucli_ward2, 3, border = "blue4") # Partition en 3 classes
rect.hclust(hc_eucli_ward2, 4, border = "red4") # Partition en 4 classes


```

La fonction `cutree()` permet de récupérer la partition des individus suivant le nombre de classes souhaitées. Elle renvoie un vecteur contenant la classe d'appartrenance de chaque individu. l'ordre des individus étant identique à celui du tableau de départ, la classe d'appartenance des individus peut facilement être ajoutée dans une nouvelle colonne du tableau de départ.

```{r}
#| code-fold: FALSE

# k = Nombre de classes souhaitées
classes <- cutree(hc_eucli_ward2, k = 4)

# Création d'une nouvelle colonne avec la classe d'appartenance
var_quanti$CLASSE <- classes


```

```{r}
#| code-fold: FALSE
#| echo: FALSE

var_quanti %>% 
  kable %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "400px")

```

\

## 4. Caractérisation & représentation

Dans l'objectif de caractèriser et de nommer les différentes classes détéctées, il peut être intérressant de faire un résumé statistique de chaque variable pour toutes les classes. Le package `gtsummary` et sa fonction `tbl_summary` est parfaite pour cela.

```{r, warning=FALSE, message = FALSE}
#| code-fold: FALSE
library(gtsummary)
tbl_summary(var_quanti, by = CLASSE)
```

### Profil des classes

L'intérprétation des profil des classes peut être facilitée par la représentation graphique. Pour cela, commencez par standardiser les valeurs avec la fonction `scale()`

```{r, warning=FALSE}
#| code-fold: FALSE

scaled_var <- scale(var_quanti[-18])

# Matrice to dataframe
scaled_var <- as.data.frame(scaled_var)

# Récupération des classe d'appartenance
scaled_var$CLASSE <- as.factor(classes)

```

Regrouper ensuite les individus par classe d'appartenance en calculant les moyennes (ou médiannes) de chaque indicateur avec la fonction `aggregate()`.

```{r, warning=FALSE}
#| code-fold: FALSE

# Regroupement individus par classe + calcul moyennes
Profil_classe <- aggregate(scaled_var[, -18],
                           by = list(CLASSE = scaled_var$CLASSE),
                           mean, na.rm = TRUE)

```

```{r echo = FALSE, include = TRUE, eval = TRUE, warning= FALSE}
#| code-fold: FALSE
Profil_classe %>% 
  kable %>%
  kable_styling("striped", full_width = F) 
```

\

Une dernière étape est nécessaire pour représenter les profil de classe avec `ggplot2`. Tranformez le tableau en format long en utilisant la fonction `pivot_longer()` du package `tidyr`.

```{r, warning=FALSE}
#| code-fold: FALSE

library(tidyr)
Profil_classe_lg <- Profil_classe |>
                      pivot_longer(!CLASSE, names_to = "variable", values_to = "value")

```

```{r echo = FALSE, include = TRUE, eval = TRUE, warning= FALSE}
#| code-fold: FALSE
Profil_classe_lg %>% 
  kable %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "300px") 
```

\

Représentation graphique des profils de classe avec `ggplot2` :

```{r, warning=FALSE}
#| code-fold: FALSE

library(ggplot2)
ggplot(Profil_classe_lg) +
  geom_bar(aes(x = variable, y = value, fill =  CLASSE), stat = "identity") +
  scale_fill_manual(values = c("lightblue3", "red3", "yellow3", "blue4")) +
  facet_wrap(~CLASSE) +
  coord_flip() + theme_bw()
```

### Cartographie

Si vous souhaitez cartographier les résultat, vous pouvez utiliser le package `mapsf`. Commencez par importer un fond de carte, puis réalisez une jointure avec le tableau de données final contenant les classes d'appartenances.

```{r, warning=FALSE, message=FALSE}
#| code-fold: FALSE

# Import d'une couche géoghraphique des pays africains 
library(sf)
pays_afrique <- st_read("data/GADM_AFRICA_2020/afrika_map.shp",  quiet = TRUE)

# Jointure Fond de carte - tableau
pays_afrique <-merge(pays_afrique,var_quanti, by.x="iso3", by.y=0, all.x=TRUE)

```

Puis cartographiez la classification avec la fonction `mapsf()` :

```{r, warning=FALSE, message=FALSE}
#| code-fold: FALSE


library(mapsf)
mf_map(x = pays_afrique, 
       var = "CLASSE", 
       type = "typo",
       pal = c("lightblue3", "red3", "yellow3", "blue4"),
       leg_title = "Classes")

mf_layout(
  title = "CAH (distance euclidienne + méthode Ward.2)",
  credits = "H. Pecout; Sources: Human Development Report 2020 & GADM 2023"
)

```

\

## <i class="bi bi-person-workspace"></i> Exercice {.title .exo-title}

::: {#exo}
[1. Créez un projet Rstudio]{.question}

*File/New Project/New Directory...*

[2. Téléchargez les données suivantes :]{.question}

|             Intitulé              |                                                                     Téléchargement                                                                      |
|:-----------------:|:---------------------------------------------------:|
| Données pays africains (UN-CEPII) | <a href="https://bit.ly/3DaCAkX" class="btn btn-outline-warning" role="button" aria-disabled="true"><i class="bi bi-cloud-arrow-down"></i> Download</a> |
| Fond de carte Afrique (GADM 2020) | <a href="https://bit.ly/3DaAUb2" class="btn btn-outline-warning" role="button" aria-disabled="true"><i class="bi bi-cloud-arrow-down"></i> Download</a> |

[3. Placez les données (décompressées) dans le répertoire de votre projet, de la façon suivante :]{.question}

```{r, echo=FALSE, out.width="70%", fig.align='center'}
knitr::include_graphics("../img/folder3.png")
```

[4. Importez les fichiers suivants en utilisant les fonctions adéquates :]{.question}

-   data/DEV_AFRICA_2018/**afrika_don.csv**\
-   data/GADM_AFRICA_2020/**afrika_map.shp**\

Vous pouvez également importer le dictionnaire des variables **afrika_don_meta.csv**.

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"
  
# Pour importer le fichier csv (afrika_don.csv)
read.csv2()
read.csv()

# Pour importer le fichier ESRI Shapefile (afrika_map.shp)
library(sf)
st_read()


```

[5. Explorez les potentielles corrélations entre les différentes variables quantitatives du tableau "afrika_don"]{.question}

Pour cela, utilisez la représentation graphique en nuage de point et le calul de coefficient de corrélation. Quelle(s) variable(s) pourraient-on exclure de la CAH ?

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"

# Nuages de points multiples  
pairs()
# Corrélation multiple
cor()

# Nuages de points 1 vs 1
plot()
# Corrélation 1 vs 1
cor_test()


```

[5. Préparez le tabmeau de données pour réalisez un CAH.]{.question}

1.  Assignez les valeurs de la variable "iso3" comme noms des lignes du tableau

2.  Sélectionnez uniquement les 10 variables suivantes :"POP", "PIB", "ADOFEC", "EMPAGR", "INTERN", "ESPVIE", "TXMIGR", "DVIEUX", "TUBERC", "URBANI"

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"

# 1. Ajout de noms de ligne 
row.names(tableau) <- tabelau$...

# 2. Sélection des colonnes
New_tab <- tableau[ , ... ]

```

[6. Calculez une matrice de distance euclidienne entre toutes les variables.]{.question}

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"

dist()

```

[7. Réalisez un regroupement hiérarchique avec la méthode "ward.d2" puis affichez le dendogramme]{.question}

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"

# Regroupement hiérarchique
hclust()

# Affichage de l'arbre
plot()

```

[7. Representez l'inertie intra-classe en fonction du partitionnement de l'arbre]{.question}

A quelle hauteur pouvons nous découper le dendogramme ? Combien de classes bien disctinctes pouvons-vous créer ?

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"

# Récupération et tri croissant de l'inertie de chaque partition
... <- sort(...$..., decreasing = TRUE)

# Représentation graphique de l'inertie en fonction du nombre de classe
plot(...)

```

[8. Découpez le dendogramme en 3 classes et assignez le résultat de la classification dans une nouvelle colonne du tableau de données]{.question}

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"

# Découpage de l'arbre et assignation de la classification dans une nouvelle colonne
...$... <- cutree()

```

[9. Cartographiez le résultat]{.question}

```{r warning = FALSE, message = FALSE , eval = FALSE}
#| code-summary: "Un peu d'aide ?"

# Joignez le tableau de données au fond de carte
merge()

# Construisez une carte de typologie - Une couleur par classe détéctée
library(mapsf)
mf_map()
mf_layout()

```

------------------------------------------------------------------------

\

::: center
<a href="/correction/CAH.zip" class="btn btn-outline-warning" role="button" aria-disabled="true"><i class="bi bi-cloud-arrow-down"></i> Corrigé</a>
:::
:::

\
\

<!-- ::: center -->

<!-- <a href="/import.pdf" class="btn btn-info" role="button" aria-disabled="true"><i class="bi bi-file-pdf"></i> Télécharger ce document format PDF</a> -->

<!-- ::: -->
